{"version":3,"sources":["components/Navbar.js","components/Uppercase.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","mystyle","cursor","className","mode","href","nav","type","id","style","onClick","changemode","htmlFor","Uppercase","useState","text","settext","handlecopyclick1","a","navigator","clipboard","writeText","showalert","color","value","backgroundColor","onChange","event","target","rows","newtxt","toUpperCase","sen","split","map","charAt","slice","toLowerCase","join","lowcase","space","length","Alert","alert","role","word","newtext","capital","msg","App","setmode","setalert","message","setTimeout","about","document","body","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c32d4860.chunk.js","sourcesContent":["import React from 'react'\n// import { Link } from 'react-router-dom'\nexport const Navbar = (props) => {\nlet  mystyle ={\n  cursor:\"pointer\"\n}\n  return (\n    <div>\n\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"/\">{props.nav}</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n              </li>\n              {/* <li className=\"nav-item\">\n                <a className=\"nav-link active\" aria-current=\"page\" to=\"/about\">About</a>\n              </li> */}\n            </ul>\n          </div>\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n              <input style={mystyle}className=\"form-check-input \" onClick={props.changemode}type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\n              <label style={mystyle}className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">{props.mode} mode</label>\n            </div>\n           \n        </div>\n        \n      </nav>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useState } from 'react'\nexport const Uppercase = (props) => {\n    const [text, settext] = useState(\"\")\n\n    // CHNAGING THE VALUE OF TEXTAREA  BY USING ONCHANGE FUNCTION\n    const changetext = (event) => {\n        // console.log(\"on change\")\n        settext(event.target.value)\n    }\n\n    //CHANGING TEXT TO UPPERCASE\n\n    const handleclick = () => {\n        if(text){\n        // console.log(\"upper case was clicked\" + text);\n        let newtxt = text.toUpperCase()\n        settext(newtxt)\n        props.showalert(\":Converted to Uppercase\",\"success\")\n    }\n    else{\n        props.showalert(\": Unsuccesfull to Uppercase!\",\"warning\")\n    }\n   \n  \n    }\n\n    // CHANGING TEXT TO LOWERCASE\n    const handleclick1 = () => {\n        if(text){\n        let lowcase = text.toLowerCase()\n        settext(lowcase)\n        props.showalert(\":Converted to lowercase!\",\"success\")\n    }\n    else{\n        props.showalert(\": Unsuccesfull to Lowercase!\",\"warning\")\n\n    }\n\n    }\n\n    // CLEARING THE TEXT\n    const handleclearclick1 = () => {\n        if(text){\n        let cleartxt = \"\"\n        settext(cleartxt)\n        props.showalert(\":Text Cleared!\",\"success\")\n    }\n    else{\n        props.showalert(\": No Text to clear!\",\"warning\")\n    }\n    }\n\n    // COPY THE TEXT ON CLIPBOARD\n    const handlecopyclick1 = async () => {\n        if (text) {  //asyn is a keyword that use await keyword to \n            await navigator.clipboard.writeText(text)\n            // alert(\"SUCCESSEFULLY COPIED :-\" + text)\n            props.showalert(\":Copied Text!\",\"success\")\n\n        }\n        else {\n            props.showalert(\":Copied Unsuccesfull Text!\",\"warning\")\n        }\n        // simple way to have copy function by getting id\n        // var text = document.getElementById('txt-area')\n        // text.select()\n        // navigator.clipboard.writeText(text.value)\n    }\n\n    // CHANGING TEXT TO TITLE CASE\n    const handletitleclick1 = () => {\n        if(text){\n        let sen = text.split(' ').map((text) => text.charAt(0).toUpperCase() + text.slice(1).toLowerCase()).join(' ')\n        settext(sen)\n        props.showalert(\":Converted to Titlecase\",\"success\")\n    }\n    else{\n        props.showalert(\": Unsuccesfull to TittleCase!\",\"warning\")\n    }\n\n    }\n\n    // REMOVING EXTRA SPACES BETWEEN TEXT\n    const handleextraclick1 = () => {\n        if(text){\n        let space = text.split(/[ ]+/);\n        settext(space.join(' '))\n        props.showalert(\":Removed Extra Spaces\",\"success\")\n    }\n    else{\n        props.showalert(\": Plzz enter the text to remove space\",\"warning\")\n    }\n\n    }\n\n\n    return (\n        <div style={{ color: props.mode ==='light'? 'black' : 'white' }}>\n            <div className=\"container my-4\" >\n                <div className=\"mb-3\">\n                    <h2>ENTER THE TEXT </h2>\n                    <textarea className=\"form-control\" value={text} style={{ backgroundColor: props.mode === 'light' ? 'white' : '#011e48', color: props.mode === 'light' ? 'black' : 'white'}} onChange={changetext} id=\"txt-area\" rows=\"6\" ></textarea>\n                </div>\n                <button className={`btn btn-${props.mode === 'light'? \"danger\":\"primary\"} btn-sm mx-2`} onClick={handleclearclick1}>CLEAR TEXT</button>\n                <button className={`btn btn-${props.mode === 'light'? \"info\":\"primary\"} btn-sm mx-2`}onClick={handleclick}>TEXT UPPERCASE</button>\n                <button className={`btn btn-${props.mode === 'light'? \"dark\":\"primary\"} btn-sm mx-2`} onClick={handlecopyclick1}>COPY TEXT</button>\n                <button className={`btn btn-${props.mode === 'light'? \"warning\":\"primary\"} btn-sm mx-2`} onClick={handletitleclick1}>TITLE CASE</button>\n                <button className={`btn btn-${props.mode === 'light'? \"success\":\"primary\"} btn-sm mx-2`} onClick={handleclick1}>TEXT LOWERCASE</button>\n                <button className={`btn btn-${props.mode === 'light'? \"secondary\":\"primary\"} btn-sm mx-2`} onClick={handleextraclick1}>REMOVE EXTRA SPACE</button>\n\n\n                <p></p>\n            </div>\n            <div className=\"container\">\n                <div className=\"mb-3\">\n                    <h2>TEXT DATA</h2>\n                    <p>WORDS:- {text.split(\" \").length-1} CHARACTERS:- {text.length}</p>\n                    <p>MINTUES FOR READING THE CONTENT:-{0.008 * text.split(\" \").length}min</p>\n                    <h2>PREVIEW</h2>\n                    <p>{text.length > 0 ? text : \"Plz enter the text to preview it here\"}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n","import React from 'react'\n\nfunction Alert(props) {\nconst capital=(word)=>{\n    const newtext= word.toLowerCase()\n    return newtext.charAt(0).toUpperCase()+newtext.slice(1)\n}\n\n    return (\n     //  the and operator is use if the 1condition is satisfied then it will go with second one but if 1st condition didnt satisfied then the another condition will also not work\n     //here the 1 conditon is props.alert if it is null then it will not execute the second part also and if it is true then the error will display\n     props.alert &&<div>    \n            <div className={`alert alert-${props.alert.type} alert-dismissible fade-in-down`} role=\"alert\">\n                <strong>{capital(props.alert.type)}</strong> {props.alert.msg} \n            </div>\n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\n// import About from './components/About';\nimport { Navbar } from './components/Navbar';\nimport { Uppercase } from './components/Uppercase';\n// import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { useState } from 'react'\nimport Alert from './components/Alert';\n\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\")\n  const modes = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\")\n      document.body.style.backgroundColor = \"#011e48\"\n      showalert(\":DARK MODE ENABLE\", \"success\")\n      document.title = \"TEXT-CONVERTOR Dark-mode\"\n    }\n    else {\n      setmode(\"light\")\n      document.body.style.backgroundColor = \"white\"\n      showalert(\":LIGHT MODE ENABLE\", \"success\")\n      document.title = \"TEXT-CONVERTOR\"\n    }\n  }\n  const [alert, setalert] = useState(null)\n  const showalert = (message, type) => {\n    setalert(\n      {\n        msg: message,\n        type: type\n      }\n    )\n    setTimeout(() => {\n      setalert(null)\n    }, 2000);\n  }\n  return (\n    <>\n      {/* <Router>\n      <Switch>\n        <Route exact path=\"/\" render={() => {\n          return ( */}\n      {/* <> */}\n      <Navbar nav=\"TEXT CONVERTOR\" about=\"About\" mode={mode} changemode={modes} />\n      <Alert alert={alert} />\n      <Uppercase mode={mode} showalert={showalert} />\n      {/* </> */}\n      {/* ) */}\n      {/* }}>\n\n        </Route>\n      </Switch> */}\n\n      {/* <Switch>\n        <Route exact path=\"/about\">\n          <About mode={mode} nav={\"TEXT CONVERTOR\"} />\n        </Route> */}\n      {/* </Switch> */}\n      {/* </Router> */}\n\n    </>\n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}